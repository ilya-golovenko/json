cmake_minimum_required(VERSION 3.10 FATAL_ERROR)

set(CMAKE_DISABLE_SOURCE_CHANGES ON)
set(CMAKE_DISABLE_IN_SOURCE_BUILD ON)

if(NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE Release CACHE STRING "Build Type" FORCE)
endif()

set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS Debug Release MinSizeRel RelWithDebInfo)

message(STATUS "Build type is ${CMAKE_BUILD_TYPE}")

set(MISSIO_NAMESPACE missio)

project(${MISSIO_NAMESPACE}-json VERSION 0.1.0 LANGUAGES CXX
    DESCRIPTION "JSON parser & generator written in C++17"
)

set(MISSIO_JSON_SOURCE_DIR ${PROJECT_SOURCE_DIR}/src)
set(MISSIO_JSON_LIBRARY_DIR ${PROJECT_SOURCE_DIR}/lib)
set(MISSIO_JSON_PACKAGE_DIR ${PROJECT_SOURCE_DIR}/pkg)
set(MISSIO_JSON_INCLUDE_DIR ${PROJECT_SOURCE_DIR}/include)
set(MISSIO_JSON_EXPORTS_DIR ${PROJECT_BINARY_DIR}/exports)

set(MISSIO_JSON_STATIC_LIBRARY_DIR ${MISSIO_JSON_LIBRARY_DIR}/static)
set(MISSIO_JSON_SHARED_LIBRARY_DIR ${MISSIO_JSON_LIBRARY_DIR}/shared)

set(MISSIO_JSON_SOURCE_FILES
    ${MISSIO_JSON_SOURCE_DIR}/error.cpp
    ${MISSIO_JSON_SOURCE_DIR}/impl.hpp
    ${MISSIO_JSON_SOURCE_DIR}/parse.cpp
    ${MISSIO_JSON_SOURCE_DIR}/utf16.hpp
    ${MISSIO_JSON_SOURCE_DIR}/utf8.hpp
    ${MISSIO_JSON_SOURCE_DIR}/utils.hpp
    ${MISSIO_JSON_SOURCE_DIR}/utils.inl
    ${MISSIO_JSON_SOURCE_DIR}/value.cpp
    ${MISSIO_JSON_SOURCE_DIR}/write.cpp
)

set(MISSIO_JSON_OBJECT_LIBRARY json-object)
set(MISSIO_JSON_STATIC_LIBRARY json-static)
set(MISSIO_JSON_SHARED_LIBRARY json-shared)

add_library(${MISSIO_JSON_OBJECT_LIBRARY} OBJECT ${MISSIO_JSON_SOURCE_FILES})

target_compile_features(${MISSIO_JSON_OBJECT_LIBRARY} PRIVATE cxx_std_17)

target_compile_definitions(${MISSIO_JSON_OBJECT_LIBRARY} PRIVATE MISSIO_JSON_EXPORTS)

if(MSVC)
    target_compile_options(${MISSIO_JSON_OBJECT_LIBRARY} PRIVATE /W3 /WX /UTF-8)
else()
    target_compile_options(${MISSIO_JSON_OBJECT_LIBRARY} PRIVATE -Wall -Wextra -pedantic)
endif()

add_library(${MISSIO_JSON_STATIC_LIBRARY} STATIC $<TARGET_OBJECTS:${MISSIO_JSON_OBJECT_LIBRARY}>)
add_library(${MISSIO_JSON_SHARED_LIBRARY} SHARED $<TARGET_OBJECTS:${MISSIO_JSON_OBJECT_LIBRARY}>)

add_library(${MISSIO_NAMESPACE}::${MISSIO_JSON_STATIC_LIBRARY} ALIAS ${MISSIO_JSON_STATIC_LIBRARY})
add_library(${MISSIO_NAMESPACE}::${MISSIO_JSON_SHARED_LIBRARY} ALIAS ${MISSIO_JSON_SHARED_LIBRARY})

target_compile_features(${MISSIO_JSON_STATIC_LIBRARY} INTERFACE cxx_std_17)
target_compile_features(${MISSIO_JSON_SHARED_LIBRARY} INTERFACE cxx_std_17)

target_compile_definitions(${MISSIO_JSON_STATIC_LIBRARY} PUBLIC MISSIO_JSON_STATIC)

set_target_properties(${MISSIO_JSON_OBJECT_LIBRARY}
    PROPERTIES
        POSITION_INDEPENDENT_CODE ON
        VISIBILITY_INLINES_HIDDEN ON
        CXX_VISIBILITY_PRESET hidden
        DEFINE_SYMBOL MISSIO_JSON_EXPORTS
)

set_target_properties(${MISSIO_JSON_STATIC_LIBRARY}
    PROPERTIES
        OUTPUT_NAME ${PROJECT_NAME}
        ARCHIVE_OUTPUT_DIRECTORY ${MISSIO_JSON_STATIC_LIBRARY_DIR}
        LIBRARY_OUTPUT_DIRECTORY ${MISSIO_JSON_STATIC_LIBRARY_DIR}
        RUNTIME_OUTPUT_DIRECTORY ${MISSIO_JSON_STATIC_LIBRARY_DIR}
)

set_target_properties(${MISSIO_JSON_SHARED_LIBRARY}
    PROPERTIES
        OUTPUT_NAME ${PROJECT_NAME}
        WINDOWS_EXPORT_ALL_SYMBOLS ON
        VERSION ${PROJECT_VERSION}
        SOVERSION ${PROJECT_VERSION_MAJOR}
        ARCHIVE_OUTPUT_DIRECTORY ${MISSIO_JSON_SHARED_LIBRARY_DIR}
        LIBRARY_OUTPUT_DIRECTORY ${MISSIO_JSON_SHARED_LIBRARY_DIR}
        RUNTIME_OUTPUT_DIRECTORY ${MISSIO_JSON_SHARED_LIBRARY_DIR}
)

include(GenerateExportHeader)

generate_export_header(${MISSIO_JSON_OBJECT_LIBRARY}
    BASE_NAME MISSIO_JSON
    STATIC_DEFINE MISSIO_JSON_STATIC
    EXPORT_FILE_NAME ${MISSIO_JSON_EXPORTS_DIR}/export.hpp
)

include(GNUInstallDirs)

target_include_directories(${MISSIO_JSON_OBJECT_LIBRARY}
    PRIVATE
        ${MISSIO_JSON_INCLUDE_DIR}
        ${MISSIO_JSON_EXPORTS_DIR}
)

target_include_directories(${MISSIO_JSON_STATIC_LIBRARY}
    INTERFACE
        $<BUILD_INTERFACE:${MISSIO_JSON_INCLUDE_DIR}>
        $<BUILD_INTERFACE:${MISSIO_JSON_EXPORTS_DIR}>
        $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>
)

target_include_directories(${MISSIO_JSON_SHARED_LIBRARY}
    INTERFACE
        $<BUILD_INTERFACE:${MISSIO_JSON_INCLUDE_DIR}>
        $<BUILD_INTERFACE:${MISSIO_JSON_EXPORTS_DIR}>
        $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>
)

install(
    TARGETS
        ${MISSIO_JSON_STATIC_LIBRARY}
        ${MISSIO_JSON_SHARED_LIBRARY}
    EXPORT ${PROJECT_NAME}-targets
    ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
    LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
    RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
)

install(
    DIRECTORY ${MISSIO_JSON_INCLUDE_DIR}/
    DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/${PROJECT_NAME}
)

install(
    FILES ${MISSIO_JSON_EXPORTS_DIR}/export.hpp
    DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/${PROJECT_NAME}
)

install(
    EXPORT ${PROJECT_NAME}-targets
    FILE ${PROJECT_NAME}-config.cmake
    NAMESPACE ${MISSIO_NAMESPACE}::
    DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME}
)

export(
    TARGETS
        ${MISSIO_JSON_STATIC_LIBRARY}
        ${MISSIO_JSON_SHARED_LIBRARY}
    NAMESPACE ${MISSIO_NAMESPACE}::
    FILE ${PROJECT_NAME}-config.cmake
)

export(PACKAGE ${PROJECT_NAME})

include(CTest)

if(BUILD_TESTING)
    add_subdirectory(test)
endif()

set(CPACK_GENERATOR ZIP)
set(CPACK_SOURCE_GENERATOR ZIP)

set(CPACK_OUTPUT_FILE_PREFIX ${MISSIO_JSON_PACKAGE_DIR})

set(CPACK_PACKAGE_VERSION_MAJOR ${PROJECT_VERSION_MAJOR})
set(CPACK_PACKAGE_VERSION_MINOR ${PROJECT_VERSION_MINOR})
set(CPACK_PACKAGE_VERSION_PATCH ${PROJECT_VERSION_PATCH})

set(ARCHITECTURE ${CMAKE_SYSTEM_PROCESSOR})

if(ARCHITECTURE STREQUAL x86_64)
    set(ARCHITECTURE amd64)
endif()

set(CPACK_PACKAGE_FILE_NAME ${PROJECT_NAME}_${PROJECT_VERSION}_${ARCHITECTURE})
set(CPACK_SOURCE_PACKAGE_FILE_NAME ${PROJECT_NAME}_${PROJECT_VERSION}_src)

list(APPEND CPACK_SOURCE_IGNORE_FILES ${PROJECT_BINARY_DIR})
list(APPEND CPACK_SOURCE_IGNORE_FILES ${MISSIO_JSON_LIBRARY_DIR})
list(APPEND CPACK_SOURCE_IGNORE_FILES ${MISSIO_JSON_PACKAGE_DIR})

list(APPEND CPACK_SOURCE_IGNORE_FILES "\\\\.git/")
list(APPEND CPACK_SOURCE_IGNORE_FILES "\\\\.vscode/")
list(APPEND CPACK_SOURCE_IGNORE_FILES "\\\\.gitattributes")
list(APPEND CPACK_SOURCE_IGNORE_FILES "\\\\.gitignore")

if(CMAKE_SYSTEM_NAME STREQUAL Linux)
    list(APPEND CPACK_GENERATOR DEB TGZ)

    set(CPACK_DEBIAN_PACKAGE_SECTION devel)
    set(CPACK_DEBIAN_PACKAGE_PRIORITY optional)

    set(CPACK_DEBIAN_PACKAGE_HOMEPAGE "https://github.com/missio-cpp/json")
    set(CPACK_DEBIAN_PACKAGE_MAINTAINER "Ilya Golovenko <ilya.golovenko@gmail.com>")
endif()

include(CPack)
